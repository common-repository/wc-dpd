{"version":3,"file":"/scripts/dpd-parcelshop-map-widget.js","mappings":"4OAAAA,OAAOC,oBAAuB,WAC7B,IACCC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAyiBiBC,EAxiBjBC,GAAmB,EAEpB,SAASC,IACRhB,EACC,+CAODC,EAAkC,oCAClCC,EACC,mDACDC,EACC,0CACDC,EACC,8CACDC,EACC,4CACDC,EACC,8CACDC,EACC,4CACDC,EACC,2CACDC,EACC,oDAEDX,EAAQmB,SAASC,cAvBQ,uCA4BzBD,SAASE,iBACR,SACA,SAAUC,GACJA,EAAMC,OAAOC,QAAQtB,KAI1BoB,EAAMG,kBAGNb,EAAiBO,SAASC,cACzB,gDAQDM,2BAA6BJ,EAAMC,OAAOI,QACzCzB,GAGIwB,8BAkER,WACC,GAAIT,EACH,OAGD,IAAMW,EAAShB,EAAeiB,aAAa,gBAE3C,IAAKD,EAEJ,YADAE,QAAQC,IAAI,0BAIbjB,EAAYkB,KAAKC,MAChBP,2BAA2BG,aAAa,mBAEzCK,iBAAmBF,KAAKC,MACvBP,2BAA2BG,aAAa,2BAEzCK,iBAAmBA,iBAAiBC,KAAK,KACzCpB,EAAkBW,2BAA2BG,aAC5C,0BAGD5B,EAAe,IAAImC,QAAQC,OAAO,CACjCT,OAAQA,EACRU,QAASvB,EACTmB,iBAAkB,CAACA,oBAGpBjB,GAAmB,CACpB,CA5FGsB,GACAC,MACD,IACA,GAMDrB,SAASE,iBACR,SACA,SAAUC,GACJA,EAAMC,OAAOC,QAhEnB,mDAoECF,EAAMG,iBAENgB,IACD,IACA,GAMDtB,SAASE,iBACR,WACA,SAAUC,GACS,WAAdA,EAAMoB,KAIVD,GACD,IACA,GAMDtB,SAASE,iBACR,UACA,SAAUC,GAERA,EAAMC,QACND,EAAMC,OAAOC,QAAQ,iCA2YM,KAHLL,SAASC,cACjCf,GACCsC,OArYExB,SAASyB,KAAKC,cAAc,IAAIC,MAAM,mBAGzC,IACA,EAEF,CAwCA,SAASC,IAAiC,IAAXC,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtC,GAAKD,GAAqC,IAA7BI,OAAOC,KAAKL,GAAME,OAA/B,CAIA,IAAMI,EAAeN,EAAKO,eAAe,MAAQP,EAAKQ,GAAK,KACrDC,EAAkBT,EAAKO,eAAe,MAAQP,EAAKQ,GAAK,KACxDE,EAAiBV,EAAKO,eAAe,QAAUP,EAAKW,KAAO,KAC3DC,EAAmBZ,EAAKO,eAAe,UAAYP,EAAKa,OAAS,KACjEC,EAAgBd,EAAKO,eAAe,OAASP,EAAKe,IAAM,KACxDC,EAAiBhB,EAAKO,eAAe,QAAUP,EAAKiB,KAAO,KAC3DC,EAAwBlB,EAAKO,eAAe,eAC/CP,EAAKmB,YACL,MA4EJ,WAaE,IAZDb,EAAYL,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACfQ,EAAeR,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAClBS,EAAcT,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACjBW,EAAgBX,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACnBa,EAAab,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAChBe,EAAcf,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACjBiB,EAAqBjB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACxBmB,EAAmBnB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACtBoB,EAAapB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAChBqB,EAAcrB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACjBsB,IAAoBtB,UAAAC,OAAA,SAAAC,IAAAF,UAAA,MAAAA,UAAA,IACpBuB,IAA8BvB,UAAAC,OAAA,SAAAC,IAAAF,UAAA,MAAAA,UAAA,IAG1BwB,EAAM,IAAIC,eACdD,EAAIE,KAAK,OAAQC,sCAAsCC,UAAU,GACjEJ,EAAIK,iBAAiB,eAAgB,qCAGrCL,EAAIM,mBAAqB,WAExB,IAAIC,EAAO,EAGPC,EAAK,IAGLR,EAAIS,aAAeF,GAClBP,EAAIU,SAAWF,GAClB9D,SAASyB,KAAKC,cAAc,IAAIC,MAAM,mBAGzC,EAGA2B,EAAIW,KACH,mDACCpF,EAAM6B,aAAa,cACnB,yBACAyB,EACA,6BACAG,EACA,2BACAC,EACA,6BACAE,EACA,0BACAE,EACA,2BACAE,EACA,mCACAE,EACA,iCACAE,EACA,0BACAC,EACA,2BACAC,EACA,0CACAC,EACA,kDACAC,EAEH,CA5HCa,CACC/B,EACAG,EACAC,EACAE,EACAE,EACAE,EACAE,EAtB2BlB,EAAKO,eAAe,aAC7CP,EAAKsC,UACL,KACmBtC,EAAKO,eAAe,OAASP,EAAKuC,IAAM,KACvCvC,EAAKO,eAAe,QAAUP,EAAKwC,KAAO,KACpCxC,EAAKO,eAAe,wBAC9CP,EAAKuB,qBACL,KACoCvB,EAAKO,eAC3C,kCAEEP,EAAKwB,+BACL,MAkBH,IAAMiB,EACL3E,GACqB,WAArB4E,EAAO5E,IACPA,EAAUyC,eAAeW,GACtBpD,EAAUoD,GACVA,EAGJ/C,SAASC,cAAcf,GAAwCsC,MAC9DW,EACDnC,SAASC,cAAcd,GAA2CqC,MACjEc,EACDtC,SAASC,cAAcb,GAA0CoC,MAChEe,EACDvC,SAASC,cAAcZ,GAA4CmC,MAClEiB,EACDzC,SAASC,cAAcV,GAAyCiC,MAC/DmB,EACD3C,SAASC,cAAcX,GAA0CkC,MAChEqB,EACD7C,SAASC,cACRT,GACCgC,MAAQuB,EAGV,IAAMyB,EAAwBvC,OAAOwC,OAAO,CAC3ClC,EACAE,EACAE,EACAE,EACAyB,IACEI,QAAO,SAAClD,GAAK,QAAOA,CAAK,IAG5BxB,SAASC,cAAchB,GAAqC0F,UAC3DH,EAAsBxD,KAAK,MAE5BhB,SACEC,cAAcjB,GACd4F,UAAUC,IAAI,SAhFhB,CAiFD,CA0EA,SAASxD,IAGR,GAFAxC,EAAM+F,UAAUC,IAAI,UAEhBpF,GAAkBX,EAAc,CACnC,IAAMgG,EAAqB9E,SAASC,cACnCf,GACCsC,MAEEsD,IACHhG,EAAaiG,QAAQC,eAAiBF,GAIvCvE,2BAA6BP,SAASC,cACrClB,IAIDW,EA8KF,WAEC,IAAMuF,EAAyBjF,SAASC,cACvC,2CAGD,GAAIgF,GAA0BA,EAAuBC,QAAS,CAC7D,IAAMC,EAAwBnF,SAASC,cACtC,mCAOD,GAJIkF,IACHzF,EAAcyF,EAAsB3D,OAGjC9B,EACH,OAAOA,CAET,CAEA,IAAM0F,EAAuBpF,SAASC,cACrC,kCAGGmF,IACH1F,EAAc0F,EAAqB5D,OAGpC,GAAI9B,EACH,OAAOA,EAKR,GAFAA,EAAca,2BAA2BG,aAAa,qBAGrD,OAAOhB,EAGR,MAAO,EACR,CArNgB2F,MAGbvG,EAAaiG,QAAQnC,IAAMlD,GAI5B,IAAMsD,EAAczC,2BAA2BG,aAC9C,0BAGGsC,IACHlE,EAAaiG,QAAQ5D,QAAU6B,GAIhC,IAAMsC,EAAgBC,SACrBhF,2BAA2BG,aAAa,0BAEnC0C,EAGC,SAFN7C,2BAA2BG,aAC1B,gCAEI2C,EAGC,SAFN9C,2BAA2BG,aAC1B,4CAGF5B,EAAaiG,QAAQO,cAAgBA,EAErC,IAAME,EAEL,SADAjF,2BAA2BG,aAAa,uBAEnC+E,EAEL,SADAlF,2BAA2BG,aAAa,yBAEnCgF,EAGC,SAFNnF,2BAA2BG,aAC1B,qCAEIiF,EAEL,SADApF,2BAA2BG,aAAa,yBAEnCkF,EAEL,SADArF,2BAA2BG,aAAa,4BAGrCmF,EAAmB,CAAC,OAAQ,UAC5BL,IACHK,EAAmBA,EAAiBnB,QAAO,SAACoB,GAAI,MAAc,SAATA,CAAe,KAEjEL,IACHI,EAAmBA,EAAiBnB,QAAO,SAACoB,GAAI,MAAc,WAATA,CAAiB,KAGvEhH,EAAaiG,QAAQc,iBAAmBA,EAExC,IAAIE,EAAqB,CACxB,sBACA,SACA,eACA,qBAGI3C,GAAyBC,IACxBD,IACJ2C,EAAqBA,EAAmBrB,QACvC,SAACoB,GAAI,MAAc,iBAATA,CAAuB,KAI9BzC,IACJ0C,EAAqBA,EAAmBrB,QACvC,SAACoB,GAAI,MAAc,WAATA,CAAiB,MAKzBL,IACAC,IACHK,EAAqBA,EAAmBrB,QACvC,SAACoB,GAAI,MAAc,wBAATA,CAA8B,KAGtCH,IACHI,EAAqBA,EAAmBrB,QACvC,SAACoB,GAAI,MAAc,WAATA,CAAiB,KAGzBF,IACHG,EAAqBA,EAAmBrB,QACvC,SAACoB,GAAI,MAAc,iBAATA,CAAuB,MAKpChH,EAAaiG,QAAQgB,mBAAqBA,EAE1C,IAAIC,EAAmB,GAEjBC,EAEL,SADA1F,2BAA2BG,aAAa,wBAEnCwF,EAGC,SAFN3F,2BAA2BG,aAC1B,kCAGEuF,GAAiBC,KAChBD,GACHD,EAAiBG,KAAK,OAGnBD,GACHF,EAAiBG,KAAK,gBAIxBrH,EAAaiG,QAAQiB,iBAAmBA,EAExClH,EACEsH,OAAO3G,GACP4G,MAAK,SAACC,GACN1E,EAAsB,CACrBS,GAAIiE,EAAKjE,GACTG,KAAM8D,EAAK9D,KACXE,OAAQ4D,EAAK5D,OACb6D,QAASD,EAAKC,QACd3D,IAAK0D,EAAK1D,IACVE,KAAMwD,EAAKxD,KACXE,YAAasD,EAAKtD,YAClBmB,UAAWmC,EAAKE,cAChBpC,OAAKkC,EAAKG,WAAYH,EAAKG,SAASC,SAAS,QAC7CrC,QACCiC,EAAKG,WAAYH,EAAKG,SAASC,SAAS,gBAGzCtD,qBAAsBA,EACtBC,+BAAgCA,IAGjC/B,GACD,IAAE,OACK,SAACqF,GACPrF,GACD,GACF,CACD,CAKA,SAASA,IACRzC,EAAM+F,UAAUgC,OAAO,UAGnB9H,GAAgBA,EAAa+H,OAChC/H,EAAa+H,OAEf,CA2EA,OAhBkBhH,EAWT,WACRE,GACD,EAX0B,aAAxBC,SAAS+D,YACe,gBAAxB/D,SAAS+D,WAET+C,WAAWjH,EAAI,GAEfG,SAASE,iBAAiB,mBAAoBL,GASzC,CACNwB,UAAWA,EAEb,CA9kB8B,E","sources":["webpack:///./assets/scripts/dpd-parcelshop-map-widget.js"],"sourcesContent":["window.dpdParcelShopWidget = (function () {\n\tvar mapWidgetPopupSelector,\n\t\tpopup,\n\t\tdpdMapWidget,\n\t\tmapWidgetPopupContainerSelector,\n\t\tmapWidgetPopupOpenBtnSelector,\n\t\tchosenParcelShopContentSelector,\n\t\tchosenParcelShopContentTextSelector,\n\t\tchosenParcelShopHiddenParcelIdSelector,\n\t\tchosenParcelShopHiddenParcelPusIdSelector,\n\t\tchosenParcelShopHiddenParcelNameSelector,\n\t\tchosenParcelShopHiddenParcelStreetSelector,\n\t\tchosenParcelShopHiddenParcelCitySelector,\n\t\tchosenParcelShopHiddenParcelZipSelector,\n\t\tchosenParcelShopHiddenParcelCountryCodeSelector,\n\t\tdpdMapWidgetEl,\n\t\tcustomerZip,\n\t\tcountries,\n\t\tbaseCountryCode,\n\t\tisMapInitialized = false;\n\n\tfunction init() {\n\t\tmapWidgetPopupOpenBtnSelector =\n\t\t\t'.js-dpd-parcelshop-map-widget-open-popup-btn';\n\n\t\tmapWidgetPopupSelector = '.js-dpd-parcelshop-map-widget-popup';\n\n\t\tmapWidgetPopupContainerSelector =\n\t\t\t'.js-dpd-parcelshop-map-widget-popup-container';\n\n\t\tchosenParcelShopContentSelector = '.js-dpd-chosen-parcelshop-content';\n\t\tchosenParcelShopContentTextSelector =\n\t\t\t'.js-dpd-chosen-parcelshop-chosen-parcelshop-text';\n\t\tchosenParcelShopHiddenParcelIdSelector =\n\t\t\t'.js-dpd-parcelshop-hidden-parcelshop-id';\n\t\tchosenParcelShopHiddenParcelPusIdSelector =\n\t\t\t'.js-dpd-parcelshop-hidden-parcelshop-pus-id';\n\t\tchosenParcelShopHiddenParcelNameSelector =\n\t\t\t'.js-dpd-parcelshop-hidden-parcelshop-name';\n\t\tchosenParcelShopHiddenParcelStreetSelector =\n\t\t\t'.js-dpd-parcelshop-hidden-parcelshop-street';\n\t\tchosenParcelShopHiddenParcelCitySelector =\n\t\t\t'.js-dpd-parcelshop-hidden-parcelshop-city';\n\t\tchosenParcelShopHiddenParcelZipSelector =\n\t\t\t'.js-dpd-parcelshop-hidden-parcelshop-zip';\n\t\tchosenParcelShopHiddenParcelCountryCodeSelector =\n\t\t\t'.js-dpd-parcelshop-hidden-parcelshop-country-code';\n\n\t\tpopup = document.querySelector(mapWidgetPopupSelector);\n\n\t\t/**\n\t\t * Open the popup when the user clicks the open button\n\t\t */\n\t\tdocument.addEventListener(\n\t\t\t'click',\n\t\t\tfunction (event) {\n\t\t\t\tif (!event.target.matches(mapWidgetPopupOpenBtnSelector)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\t// Fetch the dpdMapWidgetEl element dynamically\n\t\t\t\tdpdMapWidgetEl = document.querySelector(\n\t\t\t\t\t'.js-dpd-parcelshop-map-widget-popup-embed'\n\t\t\t\t);\n\n\t\t\t\tif (!dpdMapWidgetEl) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Fetch the dpdMapOpenWidgetMapPopupEl element dynamically\n\t\t\t\tdpdMapOpenWidgetMapPopupEl = event.target.closest(\n\t\t\t\t\tmapWidgetPopupOpenBtnSelector\n\t\t\t\t);\n\n\t\t\t\tif (!dpdMapOpenWidgetMapPopupEl) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tinitMap();\n\t\t\t\topenPopup();\n\t\t\t},\n\t\t\tfalse\n\t\t);\n\n\t\t/**\n\t\t * Close the popup when the user clicks outside of it\n\t\t */\n\t\tdocument.addEventListener(\n\t\t\t'click',\n\t\t\tfunction (event) {\n\t\t\t\tif (!event.target.matches(mapWidgetPopupContainerSelector)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\tclosePopup();\n\t\t\t},\n\t\t\tfalse\n\t\t);\n\n\t\t/**\n\t\t * Close the popup when the escape key is pressed\n\t\t */\n\t\tdocument.addEventListener(\n\t\t\t'keydown',\n\t\t\tfunction (event) {\n\t\t\t\tif (event.key !== 'Escape') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tclosePopup();\n\t\t\t},\n\t\t\tfalse\n\t\t);\n\n\t\t/**\n\t\t * Trigger the update_checkout event when the payment method is changed and a parcel shop is chosen\n\t\t */\n\t\tdocument.addEventListener(\n\t\t\t'change',\n\t\t\tfunction (event) {\n\t\t\t\tif (\n\t\t\t\t\tevent.target &&\n\t\t\t\t\tevent.target.matches('input[name=\"payment_method\"]')\n\t\t\t\t) {\n\t\t\t\t\t// Check if a parcel shop is chosen\n\t\t\t\t\tif (isParcelShopChosen()) {\n\t\t\t\t\t\t// Trigger the update_checkout event\n\t\t\t\t\t\tdocument.body.dispatchEvent(new Event('update_checkout'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tfalse\n\t\t);\n\t}\n\n\t/**\n\t * Initialize the map\n\t */\n\tfunction initMap() {\n\t\tif (isMapInitialized) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst apiKey = dpdMapWidgetEl.getAttribute('data-api-key');\n\n\t\tif (!apiKey) {\n\t\t\tconsole.log('Map Api key is missing');\n\t\t\treturn;\n\t\t}\n\n\t\tcountries = JSON.parse(\n\t\t\tdpdMapOpenWidgetMapPopupEl.getAttribute('data-countries')\n\t\t);\n\t\tallowedCountries = JSON.parse(\n\t\t\tdpdMapOpenWidgetMapPopupEl.getAttribute('data-allowed-countries')\n\t\t);\n\t\tallowedCountries = allowedCountries.join(',');\n\t\tbaseCountryCode = dpdMapOpenWidgetMapPopupEl.getAttribute(\n\t\t\t'data-base-country-code'\n\t\t);\n\n\t\tdpdMapWidget = new DpdPudo.Widget({\n\t\t\tapiKey: apiKey,\n\t\t\tcountry: baseCountryCode,\n\t\t\tallowedCountries: [allowedCountries],\n\t\t});\n\n\t\tisMapInitialized = true;\n\t}\n\n\t/**\n\t * Set the selected parcel shop in the session and update the frontend field\n\t */\n\tfunction setSelectedParcelShop(data = {}) {\n\t\tif (!data || Object.keys(data).length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst parcelShopId = data.hasOwnProperty('id') ? data.id : null;\n\t\tconst parcelShopPusId = data.hasOwnProperty('id') ? data.id : null;\n\t\tconst parcelShopName = data.hasOwnProperty('name') ? data.name : null;\n\t\tconst parcelShopStreet = data.hasOwnProperty('street') ? data.street : null;\n\t\tconst parcelShopZip = data.hasOwnProperty('zip') ? data.zip : null;\n\t\tconst parcelShopCity = data.hasOwnProperty('city') ? data.city : null;\n\t\tconst parcelShopCountryCode = data.hasOwnProperty('countryCode')\n\t\t\t? data.countryCode\n\t\t\t: null;\n\t\tconst parcelShopMaxWeight = data.hasOwnProperty('maxweight')\n\t\t\t? data.maxweight\n\t\t\t: null;\n\t\tconst parcelShopCod = data.hasOwnProperty('cod') ? data.cod : null;\n\t\tconst parcelShopCard = data.hasOwnProperty('card') ? data.card : null;\n\t\tconst isEligibleForAlzabox = data.hasOwnProperty('isEligibleForAlzabox')\n\t\t\t? data.isEligibleForAlzabox\n\t\t\t: null;\n\t\tconst isEligibleForSlovenskaPostaBox = data.hasOwnProperty(\n\t\t\t'isEligibleForSlovenskaPostaBox'\n\t\t)\n\t\t\t? data.isEligibleForSlovenskaPostaBox\n\t\t\t: null;\n\n\t\t// Update session\n\t\tsetSelectedParcelShopSession(\n\t\t\tparcelShopId,\n\t\t\tparcelShopPusId,\n\t\t\tparcelShopName,\n\t\t\tparcelShopStreet,\n\t\t\tparcelShopZip,\n\t\t\tparcelShopCity,\n\t\t\tparcelShopCountryCode,\n\t\t\tparcelShopMaxWeight,\n\t\t\tparcelShopCod,\n\t\t\tparcelShopCard,\n\t\t\tisEligibleForAlzabox,\n\t\t\tisEligibleForSlovenskaPostaBox\n\t\t);\n\n\t\tconst parcelShopCountry =\n\t\t\tcountries &&\n\t\t\ttypeof countries === 'object' &&\n\t\t\tcountries.hasOwnProperty(parcelShopCountryCode)\n\t\t\t\t? countries[parcelShopCountryCode]\n\t\t\t\t: parcelShopCountryCode;\n\n\t\t// Update frontend field\n\t\tdocument.querySelector(chosenParcelShopHiddenParcelIdSelector).value =\n\t\t\tparcelShopId;\n\t\tdocument.querySelector(chosenParcelShopHiddenParcelPusIdSelector).value =\n\t\t\tparcelShopPusId;\n\t\tdocument.querySelector(chosenParcelShopHiddenParcelNameSelector).value =\n\t\t\tparcelShopName;\n\t\tdocument.querySelector(chosenParcelShopHiddenParcelStreetSelector).value =\n\t\t\tparcelShopStreet;\n\t\tdocument.querySelector(chosenParcelShopHiddenParcelZipSelector).value =\n\t\t\tparcelShopZip;\n\t\tdocument.querySelector(chosenParcelShopHiddenParcelCitySelector).value =\n\t\t\tparcelShopCity;\n\t\tdocument.querySelector(\n\t\t\tchosenParcelShopHiddenParcelCountryCodeSelector\n\t\t).value = parcelShopCountryCode;\n\n\t\t// Filter out empty values\n\t\tconst notEmptyAddressValues = Object.values([\n\t\t\tparcelShopName,\n\t\t\tparcelShopStreet,\n\t\t\tparcelShopZip,\n\t\t\tparcelShopCity,\n\t\t\tparcelShopCountry,\n\t\t]).filter((value) => !!value);\n\n\t\t// Construct the text content\n\t\tdocument.querySelector(chosenParcelShopContentTextSelector).innerHTML =\n\t\t\tnotEmptyAddressValues.join(', ');\n\n\t\tdocument\n\t\t\t.querySelector(chosenParcelShopContentSelector)\n\t\t\t.classList.add('active');\n\t}\n\n\t/**\n\t * Set the selected parcel shop in the session\n\t */\n\tfunction setSelectedParcelShopSession(\n\t\tparcelShopId = '',\n\t\tparcelShopPusId = '',\n\t\tparcelShopName = '',\n\t\tparcelShopStreet = '',\n\t\tparcelShopZip = '',\n\t\tparcelShopCity = '',\n\t\tparcelShopCountryCode = '',\n\t\tparcelShopMaxWeight = '',\n\t\tparcelShopCod = '',\n\t\tparcelShopCard = '',\n\t\tisEligibleForAlzabox = true,\n\t\tisEligibleForSlovenskaPostaBox = true\n\t) {\n\t\t// Prepare XHR Request.\n\t\tvar xhr = new XMLHttpRequest();\n\t\txhr.open('POST', wc_dpd_parcelshop_map_widget_settings.ajax_url, true);\n\t\txhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n\t\t// Callback on response.\n\t\txhr.onreadystatechange = function () {\n\t\t\t// readyState 4 means the request is done.\n\t\t\tvar DONE = 4;\n\n\t\t\t// status 200 is a successful return.\n\t\t\tvar OK = 200;\n\n\t\t\t// Check response.\n\t\t\tif (xhr.readyState === DONE) {\n\t\t\t\tif (xhr.status === OK) {\n\t\t\t\t\tdocument.body.dispatchEvent(new Event('update_checkout'));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Finally do the call with the right parametetrs.\n\t\txhr.send(\n\t\t\t'action=wc_dpd_update_chosen_parcelshop&wp_nonce=' +\n\t\t\t\tpopup.getAttribute('data-nonce') +\n\t\t\t\t'&wc_dpd_parcelshop_id=' +\n\t\t\t\tparcelShopId +\n\t\t\t\t'&wc_dpd_parcelshop_pus_id=' +\n\t\t\t\tparcelShopPusId +\n\t\t\t\t'&wc_dpd_parcelshop_name=' +\n\t\t\t\tparcelShopName +\n\t\t\t\t'&wc_dpd_parcelshop_street=' +\n\t\t\t\tparcelShopStreet +\n\t\t\t\t'&wc_dpd_parcelshop_zip=' +\n\t\t\t\tparcelShopZip +\n\t\t\t\t'&wc_dpd_parcelshop_city=' +\n\t\t\t\tparcelShopCity +\n\t\t\t\t'&wc_dpd_parcelshop_country_code=' +\n\t\t\t\tparcelShopCountryCode +\n\t\t\t\t'&wc_dpd_parcelshop_max_weight=' +\n\t\t\t\tparcelShopMaxWeight +\n\t\t\t\t'&wc_dpd_parcelshop_cod=' +\n\t\t\t\tparcelShopCod +\n\t\t\t\t'&wc_dpd_parcelshop_card=' +\n\t\t\t\tparcelShopCard +\n\t\t\t\t'&wc_dpd_parcelshop_is_alzabox_eligible=' +\n\t\t\t\tisEligibleForAlzabox +\n\t\t\t\t'&wc_dpd_parcelshop_is_slovenska_posta_eligible=' +\n\t\t\t\tisEligibleForSlovenskaPostaBox\n\t\t);\n\t}\n\n\t/**\n\t * Open the popup\n\t */\n\tfunction openPopup() {\n\t\tpopup.classList.add('active');\n\n\t\tif (dpdMapWidgetEl && dpdMapWidget) {\n\t\t\tconst chosenParcelShopId = document.querySelector(\n\t\t\t\tchosenParcelShopHiddenParcelIdSelector\n\t\t\t).value;\n\n\t\t\tif (chosenParcelShopId) {\n\t\t\t\tdpdMapWidget.options.selectedPudoId = chosenParcelShopId;\n\t\t\t}\n\n\t\t\t// Reselect open button to get refreshed data\n\t\t\tdpdMapOpenWidgetMapPopupEl = document.querySelector(\n\t\t\t\tmapWidgetPopupOpenBtnSelector\n\t\t\t);\n\n\t\t\t// Add zip if available\n\t\t\tcustomerZip = getCustomerZip();\n\n\t\t\tif (customerZip) {\n\t\t\t\tdpdMapWidget.options.zip = customerZip;\n\t\t\t}\n\n\t\t\t// Get the selected customer country\n\t\t\tconst countryCode = dpdMapOpenWidgetMapPopupEl.getAttribute(\n\t\t\t\t'data-base-country-code'\n\t\t\t);\n\n\t\t\tif (countryCode) {\n\t\t\t\tdpdMapWidget.options.country = countryCode;\n\t\t\t}\n\n\t\t\t// Update weight and allowed locker types when opening the popup\n\t\t\tconst minWeightInKg = parseInt(\n\t\t\t\tdpdMapOpenWidgetMapPopupEl.getAttribute('data-min-weight-in-kg')\n\t\t\t);\n\t\t\tconst isEligibleForAlzabox =\n\t\t\t\tdpdMapOpenWidgetMapPopupEl.getAttribute(\n\t\t\t\t\t'data-is-eligible-for-alzabox'\n\t\t\t\t) === 'true';\n\t\t\tconst isEligibleForSlovenskaPostaBox =\n\t\t\t\tdpdMapOpenWidgetMapPopupEl.getAttribute(\n\t\t\t\t\t'data-is-eligible-for-slovenska-posta-box'\n\t\t\t\t) === 'true';\n\n\t\t\tdpdMapWidget.options.minWeightInKg = minWeightInKg;\n\n\t\t\tconst disallowShops =\n\t\t\t\tdpdMapOpenWidgetMapPopupEl.getAttribute('data-disallow-shops') ===\n\t\t\t\t'true';\n\t\t\tconst disallowLockers =\n\t\t\t\tdpdMapOpenWidgetMapPopupEl.getAttribute('data-disallow-lockers') ===\n\t\t\t\t'true';\n\t\t\tconst disallowDpdPickupStations =\n\t\t\t\tdpdMapOpenWidgetMapPopupEl.getAttribute(\n\t\t\t\t\t'data-disallow-dpd-pickup-stations'\n\t\t\t\t) === 'true';\n\t\t\tconst disallowSkPost =\n\t\t\t\tdpdMapOpenWidgetMapPopupEl.getAttribute('data-disallow-sk-post') ===\n\t\t\t\t'true';\n\t\t\tconst disallowAlzaBoxes =\n\t\t\t\tdpdMapOpenWidgetMapPopupEl.getAttribute('data-disallow-alza-boxes') ===\n\t\t\t\t'true';\n\n\t\t\tlet allowedPudoTypes = ['shop', 'locker'];\n\t\t\tif (disallowShops) {\n\t\t\t\tallowedPudoTypes = allowedPudoTypes.filter((type) => type !== 'shop');\n\t\t\t}\n\t\t\tif (disallowLockers) {\n\t\t\t\tallowedPudoTypes = allowedPudoTypes.filter((type) => type !== 'locker');\n\t\t\t}\n\n\t\t\tdpdMapWidget.options.allowedPudoTypes = allowedPudoTypes;\n\n\t\t\tlet allowedLockerTypes = [\n\t\t\t\t'dpdSkPickupStations',\n\t\t\t\t'skPost',\n\t\t\t\t'alzaSlovakia',\n\t\t\t\t'outsideOfSlovakia',\n\t\t\t];\n\n\t\t\tif (!isEligibleForAlzabox || !isEligibleForSlovenskaPostaBox) {\n\t\t\t\tif (!isEligibleForAlzabox) {\n\t\t\t\t\tallowedLockerTypes = allowedLockerTypes.filter(\n\t\t\t\t\t\t(type) => type !== 'alzaSlovakia'\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (!isEligibleForSlovenskaPostaBox) {\n\t\t\t\t\tallowedLockerTypes = allowedLockerTypes.filter(\n\t\t\t\t\t\t(type) => type !== 'skPost'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!disallowLockers) {\n\t\t\t\tif (disallowDpdPickupStations) {\n\t\t\t\t\tallowedLockerTypes = allowedLockerTypes.filter(\n\t\t\t\t\t\t(type) => type !== 'dpdSkPickupStations'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (disallowSkPost) {\n\t\t\t\t\tallowedLockerTypes = allowedLockerTypes.filter(\n\t\t\t\t\t\t(type) => type !== 'skPost'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (disallowAlzaBoxes) {\n\t\t\t\t\tallowedLockerTypes = allowedLockerTypes.filter(\n\t\t\t\t\t\t(type) => type !== 'alzaSlovakia'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdpdMapWidget.options.allowedLockerTypes = allowedLockerTypes;\n\n\t\t\tlet requiredServices = [];\n\n\t\t\tconst isCodRequired =\n\t\t\t\tdpdMapOpenWidgetMapPopupEl.getAttribute('data-is-cod-required') ===\n\t\t\t\t'true';\n\t\t\tconst isCardPaymentRequired =\n\t\t\t\tdpdMapOpenWidgetMapPopupEl.getAttribute(\n\t\t\t\t\t'data-is-card-payment-required'\n\t\t\t\t) === 'true';\n\n\t\t\tif (isCodRequired || isCardPaymentRequired) {\n\t\t\t\tif (isCodRequired) {\n\t\t\t\t\trequiredServices.push('cod');\n\t\t\t\t}\n\n\t\t\t\tif (isCardPaymentRequired) {\n\t\t\t\t\trequiredServices.push('cardPayment');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdpdMapWidget.options.requiredServices = requiredServices;\n\n\t\t\tdpdMapWidget\n\t\t\t\t.attach(dpdMapWidgetEl)\n\t\t\t\t.then((pudo) => {\n\t\t\t\t\tsetSelectedParcelShop({\n\t\t\t\t\t\tid: pudo.id,\n\t\t\t\t\t\tname: pudo.name,\n\t\t\t\t\t\tstreet: pudo.street,\n\t\t\t\t\t\thouseno: pudo.houseno,\n\t\t\t\t\t\tzip: pudo.zip,\n\t\t\t\t\t\tcity: pudo.city,\n\t\t\t\t\t\tcountryCode: pudo.countryCode,\n\t\t\t\t\t\tmaxweight: pudo.maxWeightInKg,\n\t\t\t\t\t\tcod: pudo.services && pudo.services.includes('cod') ? true : false,\n\t\t\t\t\t\tcard:\n\t\t\t\t\t\t\tpudo.services && pudo.services.includes('cardPayment')\n\t\t\t\t\t\t\t\t? true\n\t\t\t\t\t\t\t\t: false,\n\t\t\t\t\t\tisEligibleForAlzabox: isEligibleForAlzabox,\n\t\t\t\t\t\tisEligibleForSlovenskaPostaBox: isEligibleForSlovenskaPostaBox,\n\t\t\t\t\t});\n\n\t\t\t\t\tclosePopup();\n\t\t\t\t})\n\t\t\t\t.catch((code) => {\n\t\t\t\t\tclosePopup();\n\t\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Close the popup\n\t */\n\tfunction closePopup() {\n\t\tpopup.classList.remove('active');\n\n\t\t// Check if close method exists\n\t\tif (dpdMapWidget && dpdMapWidget.close) {\n\t\t\tdpdMapWidget.close();\n\t\t}\n\t}\n\n\t/**\n\t * Check if a parcel shop is chosen\n\t */\n\tfunction isParcelShopChosen() {\n\t\tvar chosenParcelShopId = document.querySelector(\n\t\t\tchosenParcelShopHiddenParcelIdSelector\n\t\t).value;\n\t\treturn chosenParcelShopId !== '';\n\t}\n\n\t/**\n\t * Get customer zip\n\t */\n\tfunction getCustomerZip() {\n\t\t// Check if ship to different address is checked\n\t\tconst shipToDifferentAddress = document.querySelector(\n\t\t\t'input[name=\"ship_to_different_address\"]'\n\t\t);\n\n\t\tif (shipToDifferentAddress && shipToDifferentAddress.checked) {\n\t\t\tconst shippingPostcodeField = document.querySelector(\n\t\t\t\t'input[name=\"shipping_postcode\"]'\n\t\t\t);\n\n\t\t\tif (shippingPostcodeField) {\n\t\t\t\tcustomerZip = shippingPostcodeField.value;\n\t\t\t}\n\n\t\t\tif (customerZip) {\n\t\t\t\treturn customerZip;\n\t\t\t}\n\t\t}\n\n\t\tconst billingPostcodeField = document.querySelector(\n\t\t\t'input[name=\"billing_postcode\"]'\n\t\t);\n\n\t\tif (billingPostcodeField) {\n\t\t\tcustomerZip = billingPostcodeField.value;\n\t\t}\n\n\t\tif (customerZip) {\n\t\t\treturn customerZip;\n\t\t}\n\n\t\tcustomerZip = dpdMapOpenWidgetMapPopupEl.getAttribute('data-customer-zip');\n\n\t\tif (customerZip) {\n\t\t\treturn customerZip;\n\t\t}\n\n\t\treturn '';\n\t}\n\n\t/**\n\t * Check if document is ready\n\t */\n\tfunction docReady(fn) {\n\t\tif (\n\t\t\tdocument.readyState === 'complete' ||\n\t\t\tdocument.readyState === 'interactive'\n\t\t) {\n\t\t\tsetTimeout(fn, 1);\n\t\t} else {\n\t\t\tdocument.addEventListener('DOMContentLoaded', fn);\n\t\t}\n\t}\n\n\tdocReady(function () {\n\t\tinit();\n\t});\n\n\t// Allow the functions to be called from outside\n\treturn {\n\t\topenPopup: openPopup,\n\t};\n})();\n"],"names":["window","dpdParcelShopWidget","popup","dpdMapWidget","mapWidgetPopupOpenBtnSelector","chosenParcelShopContentSelector","chosenParcelShopContentTextSelector","chosenParcelShopHiddenParcelIdSelector","chosenParcelShopHiddenParcelPusIdSelector","chosenParcelShopHiddenParcelNameSelector","chosenParcelShopHiddenParcelStreetSelector","chosenParcelShopHiddenParcelCitySelector","chosenParcelShopHiddenParcelZipSelector","chosenParcelShopHiddenParcelCountryCodeSelector","dpdMapWidgetEl","customerZip","countries","baseCountryCode","fn","isMapInitialized","init","document","querySelector","addEventListener","event","target","matches","preventDefault","dpdMapOpenWidgetMapPopupEl","closest","apiKey","getAttribute","console","log","JSON","parse","allowedCountries","join","DpdPudo","Widget","country","initMap","openPopup","closePopup","key","value","body","dispatchEvent","Event","setSelectedParcelShop","data","arguments","length","undefined","Object","keys","parcelShopId","hasOwnProperty","id","parcelShopPusId","parcelShopName","name","parcelShopStreet","street","parcelShopZip","zip","parcelShopCity","city","parcelShopCountryCode","countryCode","parcelShopMaxWeight","parcelShopCod","parcelShopCard","isEligibleForAlzabox","isEligibleForSlovenskaPostaBox","xhr","XMLHttpRequest","open","wc_dpd_parcelshop_map_widget_settings","ajax_url","setRequestHeader","onreadystatechange","DONE","OK","readyState","status","send","setSelectedParcelShopSession","maxweight","cod","card","parcelShopCountry","_typeof","notEmptyAddressValues","values","filter","innerHTML","classList","add","chosenParcelShopId","options","selectedPudoId","shipToDifferentAddress","checked","shippingPostcodeField","billingPostcodeField","getCustomerZip","minWeightInKg","parseInt","disallowShops","disallowLockers","disallowDpdPickupStations","disallowSkPost","disallowAlzaBoxes","allowedPudoTypes","type","allowedLockerTypes","requiredServices","isCodRequired","isCardPaymentRequired","push","attach","then","pudo","houseno","maxWeightInKg","services","includes","code","remove","close","setTimeout"],"sourceRoot":""}